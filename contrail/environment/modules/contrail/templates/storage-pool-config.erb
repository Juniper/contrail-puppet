#!/usr/bin/python
import sys
import subprocess
from contrail_provisioning.storage.storagefs import ceph_utils

NUM_TARGET_OSD=<%=@contrail_storage_num_osd%>
storage_hostnames=['<%= @storage_compute_names%>']
storage_chassis_config=['<%= @contrail_pool_map%>']

osd_map_config=[]

#for disk in storage_chassis_config:
  #disksplit = disk.split(':')
  #disk_name = disksplit[1]
  #cmd  = ("ceph-disk list | grep \" *%s.*ceph data\" | sed -ne 's/.*osd.\([0-9][0-9]*\).*/\\1/p' " %(disk_name))
  #osd_id=subprocess.check_output(cmd, shell=True)
  #disksplit[2] = osd_id.rstrip('\n')
  #osd_map= ':'.join(disksplit)
  #osd_map_config.append(osd_map)

if len(storage_hostnames) == 0:
    print 'storage_hostnames empty'
    sys.exit(1)

if len(storage_chassis_config) == 0:
    print 'storage_chassis_config is empty'
    sys.exit(1)


ceph_setup_utils = ceph_utils.SetupCephUtils()
NUM_CURR_OSD = ceph_setup_utils.exec_local("ceph -s | grep 'osdmap' | awk '{print $7}' ")

if int(NUM_CURR_OSD) == NUM_TARGET_OSD:
  osd_map_config=[]
  for host in storage_hostnames:
    file_name =host+'-disk-osd-map.txt'
    ceph_setup_utils.exec_local("rados -p internal get %s /tmp/%s" %(file_name, file_name))

    file=open('/tmp/'+file_name, 'r')
    osd_map_str=file.read()
    file.close()
    osd_map_config = osd_map_config + eval(osd_map_str)
    #osd_map_config.append(osd_map_map)

  print osd_map_config

  #sys.exit(0)
  # Initialize crush map
  crush_map = ceph_setup_utils.initialize_crush()
  # Do chassis configuration
  crush_map = ceph_setup_utils.do_pool_config(crush_map,
                                    storage_hostnames,
                                    storage_chassis_config,
                                    ['none'],
                                    osd_map_config)
    # Apply crushmap
  ceph_setup_utils.apply_crush(crush_map)

else:
  print 'Exiting as current OSDs={0}, needed= {1}'.format(NUM_CURR_OSD, NUM_TARGET_OSD)
  sys.exit (1)


